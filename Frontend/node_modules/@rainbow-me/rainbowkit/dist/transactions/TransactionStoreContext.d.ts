import React from 'react';
export declare function TransactionStoreProvider({ children, }: {
    children: React.ReactNode;
}): JSX.Element;
export declare function useTransactionStore(): {
    addTransaction: (account: string, chainId: number, transaction: import("./transactionStore").NewTransaction) => void;
    clearTransactions: (account: string, chainId: number) => void;
    getTransactions: (account: string, chainId: number) => import("./transactionStore").Transaction[];
    onChange: (fn: () => void) => () => void;
    setProvider: (newProvider: {
        chain: any;
        key: string;
        name: string;
        pollingInterval: number;
        request: {
            (args: {
                method: "web3_clientVersion";
                params?: undefined;
            }): Promise<string>;
            (args: {
                method: "web3_sha3";
                params: [data: `0x${string}`];
            }): Promise<string>;
            (args: {
                method: "net_listening";
                params?: undefined;
            }): Promise<boolean>;
            (args: {
                method: "net_peerCount";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "net_version";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_blockNumber";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_call";
                params: [request: Partial<import("viem").RpcTransactionRequest>, block?: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier | undefined];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_chainId";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_coinbase";
                params?: undefined;
            }): Promise<Address>;
            (args: {
                method: "eth_estimateGas";
                params: [parameters: import("viem").RpcTransactionRequest, block?: `0x${string}` | import("viem").BlockTag | undefined];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_feeHistory";
                params: [blockCount: `0x${string}`, newestBlock: `0x${string}` | import("viem").BlockTag, rewardPercentiles: number[] | undefined];
            }): Promise<import("viem").RpcFeeHistory>;
            (args: {
                method: "eth_gasPrice";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getBalance";
                params: [address: Address, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getBlockByHash";
                params: [hash: `0x${string}`, includeTransactionObjects: boolean];
            }): Promise<import("viem").RpcBlock | null>;
            (args: {
                method: "eth_getBlockByNumber";
                params: [block: `0x${string}` | import("viem").BlockTag, includeTransactionObjects: boolean];
            }): Promise<import("viem").RpcBlock | null>;
            (args: {
                method: "eth_getBlockTransactionCountByHash";
                params: [hash: `0x${string}`];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getBlockTransactionCountByNumber";
                params: [block: `0x${string}` | import("viem").BlockTag];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getCode";
                params: [address: Address, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getFilterChanges";
                params: [filterId: `0x${string}`];
            }): Promise<import("viem").RpcLog[] | `0x${string}`[]>;
            (args: {
                method: "eth_getFilterLogs";
                params: [filterId: `0x${string}`];
            }): Promise<import("viem").RpcLog[]>;
            (args: {
                method: "eth_getLogs";
                params: [parameters: {
                    address?: any;
                    topics?: import("viem/dist/types/types/misc").LogTopic[] | undefined;
                } & ({
                    fromBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                    toBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                    blockHash?: undefined;
                } | {
                    fromBlock?: undefined;
                    toBlock?: undefined;
                    blockHash?: `0x${string}` | undefined;
                })];
            }): Promise<import("viem").RpcLog[]>;
            (args: {
                method: "eth_getStorageAt";
                params: [address: Address, index: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getTransactionByBlockHashAndIndex";
                params: [hash: `0x${string}`, index: `0x${string}`];
            }): Promise<import("viem").RpcTransaction | null>;
            (args: {
                method: "eth_getTransactionByBlockNumberAndIndex";
                params: [block: `0x${string}` | import("viem").BlockTag, index: `0x${string}`];
            }): Promise<import("viem").RpcTransaction | null>;
            (args: {
                method: "eth_getTransactionByHash";
                params: [hash: `0x${string}`];
            }): Promise<import("viem").RpcTransaction | null>;
            (args: {
                method: "eth_getTransactionCount";
                params: [address: Address, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getTransactionReceipt";
                params: [hash: `0x${string}`];
            }): Promise<import("viem").RpcTransactionReceipt | null>;
            (args: {
                method: "eth_getUncleByBlockHashAndIndex";
                params: [hash: `0x${string}`, index: `0x${string}`];
            }): Promise<import("viem").RpcUncle | null>;
            (args: {
                method: "eth_getUncleByBlockNumberAndIndex";
                params: [block: `0x${string}` | import("viem").BlockTag, index: `0x${string}`];
            }): Promise<import("viem").RpcUncle | null>;
            (args: {
                method: "eth_getUncleCountByBlockHash";
                params: [hash: `0x${string}`];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getUncleCountByBlockNumber";
                params: [block: `0x${string}` | import("viem").BlockTag];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_newBlockFilter";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_newFilter";
                params: [filter: {
                    fromBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                    toBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                    address?: any;
                    topics?: import("viem/dist/types/types/misc").LogTopic[] | undefined;
                }];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_newPendingTransactionFilter";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_protocolVersion";
                params?: undefined;
            }): Promise<string>;
            (args: {
                method: "eth_sendRawTransaction";
                params: [signedTransaction: `0x${string}`];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_uninstallFilter";
                params: [filterId: `0x${string}`];
            }): Promise<boolean>;
        };
        transport: import("viem").TransportConfig<string, {
            (args: {
                method: "web3_clientVersion";
                params?: undefined;
            }): Promise<string>;
            (args: {
                method: "web3_sha3";
                params: [data: `0x${string}`];
            }): Promise<string>;
            (args: {
                method: "net_listening";
                params?: undefined;
            }): Promise<boolean>;
            (args: {
                method: "net_peerCount";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "net_version";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_blockNumber";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_call";
                params: [request: Partial<import("viem").RpcTransactionRequest>, block?: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier | undefined];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_chainId";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_coinbase";
                params?: undefined;
            }): Promise<Address>;
            (args: {
                method: "eth_estimateGas";
                params: [parameters: import("viem").RpcTransactionRequest, block?: `0x${string}` | import("viem").BlockTag | undefined];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_feeHistory";
                params: [blockCount: `0x${string}`, newestBlock: `0x${string}` | import("viem").BlockTag, rewardPercentiles: number[] | undefined];
            }): Promise<import("viem").RpcFeeHistory>;
            (args: {
                method: "eth_gasPrice";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getBalance";
                params: [address: Address, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getBlockByHash";
                params: [hash: `0x${string}`, includeTransactionObjects: boolean];
            }): Promise<import("viem").RpcBlock | null>;
            (args: {
                method: "eth_getBlockByNumber";
                params: [block: `0x${string}` | import("viem").BlockTag, includeTransactionObjects: boolean];
            }): Promise<import("viem").RpcBlock | null>;
            (args: {
                method: "eth_getBlockTransactionCountByHash";
                params: [hash: `0x${string}`];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getBlockTransactionCountByNumber";
                params: [block: `0x${string}` | import("viem").BlockTag];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getCode";
                params: [address: Address, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getFilterChanges";
                params: [filterId: `0x${string}`];
            }): Promise<import("viem").RpcLog[] | `0x${string}`[]>;
            (args: {
                method: "eth_getFilterLogs";
                params: [filterId: `0x${string}`];
            }): Promise<import("viem").RpcLog[]>;
            (args: {
                method: "eth_getLogs";
                params: [parameters: {
                    address?: any;
                    topics?: import("viem/dist/types/types/misc").LogTopic[] | undefined;
                } & ({
                    fromBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                    toBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                    blockHash?: undefined;
                } | {
                    fromBlock?: undefined;
                    toBlock?: undefined;
                    blockHash?: `0x${string}` | undefined;
                })];
            }): Promise<import("viem").RpcLog[]>;
            (args: {
                method: "eth_getStorageAt";
                params: [address: Address, index: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getTransactionByBlockHashAndIndex";
                params: [hash: `0x${string}`, index: `0x${string}`];
            }): Promise<import("viem").RpcTransaction | null>;
            (args: {
                method: "eth_getTransactionByBlockNumberAndIndex";
                params: [block: `0x${string}` | import("viem").BlockTag, index: `0x${string}`];
            }): Promise<import("viem").RpcTransaction | null>;
            (args: {
                method: "eth_getTransactionByHash";
                params: [hash: `0x${string}`];
            }): Promise<import("viem").RpcTransaction | null>;
            (args: {
                method: "eth_getTransactionCount";
                params: [address: Address, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getTransactionReceipt";
                params: [hash: `0x${string}`];
            }): Promise<import("viem").RpcTransactionReceipt | null>;
            (args: {
                method: "eth_getUncleByBlockHashAndIndex";
                params: [hash: `0x${string}`, index: `0x${string}`];
            }): Promise<import("viem").RpcUncle | null>;
            (args: {
                method: "eth_getUncleByBlockNumberAndIndex";
                params: [block: `0x${string}` | import("viem").BlockTag, index: `0x${string}`];
            }): Promise<import("viem").RpcUncle | null>;
            (args: {
                method: "eth_getUncleCountByBlockHash";
                params: [hash: `0x${string}`];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getUncleCountByBlockNumber";
                params: [block: `0x${string}` | import("viem").BlockTag];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_newBlockFilter";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_newFilter";
                params: [filter: {
                    fromBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                    toBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                    address?: any;
                    topics?: import("viem/dist/types/types/misc").LogTopic[] | undefined;
                }];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_newPendingTransactionFilter";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_protocolVersion";
                params?: undefined;
            }): Promise<string>;
            (args: {
                method: "eth_sendRawTransaction";
                params: [signedTransaction: `0x${string}`];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_uninstallFilter";
                params: [filterId: `0x${string}`];
            }): Promise<boolean>;
        } & {
            (args: {
                method: "eth_sendTransaction";
                params: [request: import("viem").RpcTransactionRequest];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_sign";
                params: [address: Address, data: `0x${string}`];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_signTransaction";
                params: [request: import("viem").RpcTransactionRequest];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_signTypedData_v4";
                params: [address: Address, message: string];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_syncing";
                params?: undefined;
            }): Promise<false | import("viem/dist/types/types/eip1193").NetworkSync>;
            (args: {
                method: "personal_sign";
                params: [data: `0x${string}`, address: Address];
            }): Promise<`0x${string}`>;
        } & {
            (args: {
                method: "eth_accounts";
                params?: undefined;
            }): Promise<Address[]>;
            (args: {
                method: "eth_chainId";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_requestAccounts";
                params?: undefined;
            }): Promise<Address[]>;
            (args: {
                method: "wallet_requestPermissions";
                params: [permissions: {
                    eth_accounts: Record<string, any>;
                }];
            }): Promise<import("viem/dist/types/types/eip1193").WalletPermission[]>;
            (args: {
                method: "wallet_getPermissions";
                params?: undefined;
            }): Promise<import("viem/dist/types/types/eip1193").WalletPermission[]>;
            (args: {
                method: "wallet_addEthereumChain";
                params: [chain: import("viem/dist/types/types/eip1193").Chain];
            }): Promise<null>;
            (args: {
                method: "wallet_switchEthereumChain";
                params: [chain: {
                    chainId: string;
                }];
            }): Promise<null>;
            (args: {
                method: "wallet_watchAsset";
                params: import("viem/dist/types/types/eip1193").WatchAssetParams;
            }): Promise<boolean>;
        }> & Record<string, any>;
        type: string;
        uid: string;
        batch?: {
            multicall?: boolean | import("viem/dist/types/clients/createPublicClient").MulticallBatchOptions | undefined;
        } | undefined;
        call: (parameters: import("viem").CallParameters<any>) => Promise<import("viem").CallReturnType>;
        createBlockFilter: () => Promise<{
            id: `0x${string}`;
            request: {
                (args: {
                    method: "web3_clientVersion";
                    params?: undefined;
                }): Promise<string>;
                (args: {
                    method: "web3_sha3";
                    params: [data: `0x${string}`];
                }): Promise<string>;
                (args: {
                    method: "net_listening";
                    params?: undefined;
                }): Promise<boolean>;
                (args: {
                    method: "net_peerCount";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "net_version";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_blockNumber";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_call";
                    params: [request: Partial<import("viem").RpcTransactionRequest>, block?: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier | undefined];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_chainId";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_coinbase";
                    params?: undefined;
                }): Promise<Address>;
                (args: {
                    method: "eth_estimateGas";
                    params: [parameters: import("viem").RpcTransactionRequest, block?: `0x${string}` | import("viem").BlockTag | undefined];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_feeHistory";
                    params: [blockCount: `0x${string}`, newestBlock: `0x${string}` | import("viem").BlockTag, rewardPercentiles: number[] | undefined];
                }): Promise<import("viem").RpcFeeHistory>;
                (args: {
                    method: "eth_gasPrice";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getBalance";
                    params: [address: Address, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getBlockByHash";
                    params: [hash: `0x${string}`, includeTransactionObjects: boolean];
                }): Promise<import("viem").RpcBlock | null>;
                (args: {
                    method: "eth_getBlockByNumber";
                    params: [block: `0x${string}` | import("viem").BlockTag, includeTransactionObjects: boolean];
                }): Promise<import("viem").RpcBlock | null>;
                (args: {
                    method: "eth_getBlockTransactionCountByHash";
                    params: [hash: `0x${string}`];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getBlockTransactionCountByNumber";
                    params: [block: `0x${string}` | import("viem").BlockTag];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getCode";
                    params: [address: Address, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getFilterChanges";
                    params: [filterId: `0x${string}`];
                }): Promise<import("viem").RpcLog[] | `0x${string}`[]>;
                (args: {
                    method: "eth_getFilterLogs";
                    params: [filterId: `0x${string}`];
                }): Promise<import("viem").RpcLog[]>;
                (args: {
                    method: "eth_getLogs";
                    params: [parameters: {
                        address?: any;
                        topics?: import("viem/dist/types/types/misc").LogTopic[] | undefined;
                    } & ({
                        fromBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                        toBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                        blockHash?: undefined;
                    } | {
                        fromBlock?: undefined;
                        toBlock?: undefined;
                        blockHash?: `0x${string}` | undefined;
                    })];
                }): Promise<import("viem").RpcLog[]>;
                (args: {
                    method: "eth_getStorageAt";
                    params: [address: Address, index: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getTransactionByBlockHashAndIndex";
                    params: [hash: `0x${string}`, index: `0x${string}`];
                }): Promise<import("viem").RpcTransaction | null>;
                (args: {
                    method: "eth_getTransactionByBlockNumberAndIndex";
                    params: [block: `0x${string}` | import("viem").BlockTag, index: `0x${string}`];
                }): Promise<import("viem").RpcTransaction | null>;
                (args: {
                    method: "eth_getTransactionByHash";
                    params: [hash: `0x${string}`];
                }): Promise<import("viem").RpcTransaction | null>;
                (args: {
                    method: "eth_getTransactionCount";
                    params: [address: Address, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getTransactionReceipt";
                    params: [hash: `0x${string}`];
                }): Promise<import("viem").RpcTransactionReceipt | null>;
                (args: {
                    method: "eth_getUncleByBlockHashAndIndex";
                    params: [hash: `0x${string}`, index: `0x${string}`];
                }): Promise<import("viem").RpcUncle | null>;
                (args: {
                    method: "eth_getUncleByBlockNumberAndIndex";
                    params: [block: `0x${string}` | import("viem").BlockTag, index: `0x${string}`];
                }): Promise<import("viem").RpcUncle | null>;
                (args: {
                    method: "eth_getUncleCountByBlockHash";
                    params: [hash: `0x${string}`];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getUncleCountByBlockNumber";
                    params: [block: `0x${string}` | import("viem").BlockTag];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_newBlockFilter";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_newFilter";
                    params: [filter: {
                        fromBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                        toBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                        address?: any;
                        topics?: import("viem/dist/types/types/misc").LogTopic[] | undefined;
                    }];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_newPendingTransactionFilter";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_protocolVersion";
                    params?: undefined;
                }): Promise<string>;
                (args: {
                    method: "eth_sendRawTransaction";
                    params: [signedTransaction: `0x${string}`];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_uninstallFilter";
                    params: [filterId: `0x${string}`];
                }): Promise<boolean>;
            } & {
                (args: {
                    method: "eth_sendTransaction";
                    params: [request: import("viem").RpcTransactionRequest];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_sign";
                    params: [address: Address, data: `0x${string}`];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_signTransaction";
                    params: [request: import("viem").RpcTransactionRequest];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_signTypedData_v4";
                    params: [address: Address, message: string];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_syncing";
                    params?: undefined;
                }): Promise<false | import("viem/dist/types/types/eip1193").NetworkSync>;
                (args: {
                    method: "personal_sign";
                    params: [data: `0x${string}`, address: Address];
                }): Promise<`0x${string}`>;
            } & {
                (args: {
                    method: "eth_accounts";
                    params?: undefined;
                }): Promise<Address[]>;
                (args: {
                    method: "eth_chainId";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_requestAccounts";
                    params?: undefined;
                }): Promise<Address[]>;
                (args: {
                    method: "wallet_requestPermissions";
                    params: [permissions: {
                        eth_accounts: Record<string, any>;
                    }];
                }): Promise<import("viem/dist/types/types/eip1193").WalletPermission[]>;
                (args: {
                    method: "wallet_getPermissions";
                    params?: undefined;
                }): Promise<import("viem/dist/types/types/eip1193").WalletPermission[]>;
                (args: {
                    method: "wallet_addEthereumChain";
                    params: [chain: import("viem/dist/types/types/eip1193").Chain];
                }): Promise<null>;
                (args: {
                    method: "wallet_switchEthereumChain";
                    params: [chain: {
                        chainId: string;
                    }];
                }): Promise<null>;
                (args: {
                    method: "wallet_watchAsset";
                    params: import("viem/dist/types/types/eip1193").WatchAssetParams;
                }): Promise<boolean>;
            };
            type: "block";
        }>;
        createContractEventFilter: <TAbi extends unknown, TEventName extends string | undefined, TArgs extends import("viem/dist/types/types/contract").MaybeExtractEventArgsFromAbi<TAbi, TEventName> | undefined>(args: import("viem").CreateContractEventFilterParameters<TAbi, TEventName, TArgs>) => Promise<import("viem").CreateContractEventFilterReturnType<TAbi, TEventName, TArgs>>;
        createEventFilter: <TAbiEvent extends unknown, TAbi_1 extends unknown, TEventName_1 extends string | undefined, TArgs_1 extends import("viem/dist/types/types/contract").MaybeExtractEventArgsFromAbi<TAbi_1, TEventName_1> | undefined>(args?: import("viem").CreateEventFilterParameters<TAbiEvent, TAbi_1, TEventName_1, TArgs_1> | undefined) => Promise<import("viem/dist/types/types/filter").Filter<"event", TAbi_1, TEventName_1, TArgs_1> extends infer T ? { [K in keyof T]: import("viem/dist/types/types/filter").Filter<"event", TAbi_1, TEventName_1, TArgs_1>[K]; } : never>;
        createPendingTransactionFilter: () => Promise<{
            id: `0x${string}`;
            request: {
                (args: {
                    method: "web3_clientVersion";
                    params?: undefined;
                }): Promise<string>;
                (args: {
                    method: "web3_sha3";
                    params: [data: `0x${string}`];
                }): Promise<string>;
                (args: {
                    method: "net_listening";
                    params?: undefined;
                }): Promise<boolean>;
                (args: {
                    method: "net_peerCount";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "net_version";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_blockNumber";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_call";
                    params: [request: Partial<import("viem").RpcTransactionRequest>, block?: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier | undefined];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_chainId";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_coinbase";
                    params?: undefined;
                }): Promise<Address>;
                (args: {
                    method: "eth_estimateGas";
                    params: [parameters: import("viem").RpcTransactionRequest, block?: `0x${string}` | import("viem").BlockTag | undefined];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_feeHistory";
                    params: [blockCount: `0x${string}`, newestBlock: `0x${string}` | import("viem").BlockTag, rewardPercentiles: number[] | undefined];
                }): Promise<import("viem").RpcFeeHistory>;
                (args: {
                    method: "eth_gasPrice";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getBalance";
                    params: [address: Address, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getBlockByHash";
                    params: [hash: `0x${string}`, includeTransactionObjects: boolean];
                }): Promise<import("viem").RpcBlock | null>;
                (args: {
                    method: "eth_getBlockByNumber";
                    params: [block: `0x${string}` | import("viem").BlockTag, includeTransactionObjects: boolean];
                }): Promise<import("viem").RpcBlock | null>;
                (args: {
                    method: "eth_getBlockTransactionCountByHash";
                    params: [hash: `0x${string}`];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getBlockTransactionCountByNumber";
                    params: [block: `0x${string}` | import("viem").BlockTag];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getCode";
                    params: [address: Address, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getFilterChanges";
                    params: [filterId: `0x${string}`];
                }): Promise<import("viem").RpcLog[] | `0x${string}`[]>;
                (args: {
                    method: "eth_getFilterLogs";
                    params: [filterId: `0x${string}`];
                }): Promise<import("viem").RpcLog[]>;
                (args: {
                    method: "eth_getLogs";
                    params: [parameters: {
                        address?: any;
                        topics?: import("viem/dist/types/types/misc").LogTopic[] | undefined;
                    } & ({
                        fromBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                        toBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                        blockHash?: undefined;
                    } | {
                        fromBlock?: undefined;
                        toBlock?: undefined;
                        blockHash?: `0x${string}` | undefined;
                    })];
                }): Promise<import("viem").RpcLog[]>;
                (args: {
                    method: "eth_getStorageAt";
                    params: [address: Address, index: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getTransactionByBlockHashAndIndex";
                    params: [hash: `0x${string}`, index: `0x${string}`];
                }): Promise<import("viem").RpcTransaction | null>;
                (args: {
                    method: "eth_getTransactionByBlockNumberAndIndex";
                    params: [block: `0x${string}` | import("viem").BlockTag, index: `0x${string}`];
                }): Promise<import("viem").RpcTransaction | null>;
                (args: {
                    method: "eth_getTransactionByHash";
                    params: [hash: `0x${string}`];
                }): Promise<import("viem").RpcTransaction | null>;
                (args: {
                    method: "eth_getTransactionCount";
                    params: [address: Address, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getTransactionReceipt";
                    params: [hash: `0x${string}`];
                }): Promise<import("viem").RpcTransactionReceipt | null>;
                (args: {
                    method: "eth_getUncleByBlockHashAndIndex";
                    params: [hash: `0x${string}`, index: `0x${string}`];
                }): Promise<import("viem").RpcUncle | null>;
                (args: {
                    method: "eth_getUncleByBlockNumberAndIndex";
                    params: [block: `0x${string}` | import("viem").BlockTag, index: `0x${string}`];
                }): Promise<import("viem").RpcUncle | null>;
                (args: {
                    method: "eth_getUncleCountByBlockHash";
                    params: [hash: `0x${string}`];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getUncleCountByBlockNumber";
                    params: [block: `0x${string}` | import("viem").BlockTag];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_newBlockFilter";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_newFilter";
                    params: [filter: {
                        fromBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                        toBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                        address?: any;
                        topics?: import("viem/dist/types/types/misc").LogTopic[] | undefined;
                    }];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_newPendingTransactionFilter";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_protocolVersion";
                    params?: undefined;
                }): Promise<string>;
                (args: {
                    method: "eth_sendRawTransaction";
                    params: [signedTransaction: `0x${string}`];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_uninstallFilter";
                    params: [filterId: `0x${string}`];
                }): Promise<boolean>;
            } & {
                (args: {
                    method: "eth_sendTransaction";
                    params: [request: import("viem").RpcTransactionRequest];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_sign";
                    params: [address: Address, data: `0x${string}`];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_signTransaction";
                    params: [request: import("viem").RpcTransactionRequest];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_signTypedData_v4";
                    params: [address: Address, message: string];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_syncing";
                    params?: undefined;
                }): Promise<false | import("viem/dist/types/types/eip1193").NetworkSync>;
                (args: {
                    method: "personal_sign";
                    params: [data: `0x${string}`, address: Address];
                }): Promise<`0x${string}`>;
            } & {
                (args: {
                    method: "eth_accounts";
                    params?: undefined;
                }): Promise<Address[]>;
                (args: {
                    method: "eth_chainId";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_requestAccounts";
                    params?: undefined;
                }): Promise<Address[]>;
                (args: {
                    method: "wallet_requestPermissions";
                    params: [permissions: {
                        eth_accounts: Record<string, any>;
                    }];
                }): Promise<import("viem/dist/types/types/eip1193").WalletPermission[]>;
                (args: {
                    method: "wallet_getPermissions";
                    params?: undefined;
                }): Promise<import("viem/dist/types/types/eip1193").WalletPermission[]>;
                (args: {
                    method: "wallet_addEthereumChain";
                    params: [chain: import("viem/dist/types/types/eip1193").Chain];
                }): Promise<null>;
                (args: {
                    method: "wallet_switchEthereumChain";
                    params: [chain: {
                        chainId: string;
                    }];
                }): Promise<null>;
                (args: {
                    method: "wallet_watchAsset";
                    params: import("viem/dist/types/types/eip1193").WatchAssetParams;
                }): Promise<boolean>;
            };
            type: "transaction";
        }>;
        estimateContractGas: <TChain extends unknown, TAbi_2 extends unknown, TFunctionName extends string>(args: import("viem/dist/types/actions/public/estimateContractGas").EstimateContractGasParameters<TAbi_2, TFunctionName, TChain>) => Promise<bigint>;
        estimateGas: (args: import("viem").EstimateGasParameters<any>) => Promise<bigint>;
        getBalance: (args: import("viem").GetBalanceParameters) => Promise<bigint>;
        getBlock: (args?: import("viem").GetBlockParameters | undefined) => Promise<any>;
        getBlockNumber: (args?: import("viem").GetBlockNumberParameters | undefined) => Promise<bigint>;
        getBlockTransactionCount: (args?: import("viem").GetBlockTransactionCountParameters | undefined) => Promise<number>;
        getBytecode: (args: import("viem").GetBytecodeParameters) => Promise<import("viem").GetBytecodeReturnType>;
        getChainId: () => Promise<number>;
        getEnsAddress: (args: {
            blockNumber?: bigint | undefined;
            blockTag?: import("viem").BlockTag | undefined;
            name: string;
            universalResolverAddress?: any;
        }) => Promise<any>;
        getEnsAvatar: (args: {
            name: string;
            blockNumber?: bigint | undefined;
            blockTag?: import("viem").BlockTag | undefined;
            universalResolverAddress?: any;
            gatewayUrls?: import("viem").AssetGatewayUrls | undefined;
        }) => Promise<import("viem/ens").GetEnsAvatarReturnType>;
        getEnsName: (args: {
            blockNumber?: bigint | undefined;
            blockTag?: import("viem").BlockTag | undefined;
            address: Address;
            universalResolverAddress?: any;
        }) => Promise<import("viem").GetEnsNameReturnType>;
        getEnsResolver: (args: {
            blockNumber?: bigint | undefined;
            blockTag?: import("viem").BlockTag | undefined;
            name: string;
            universalResolverAddress?: any;
        }) => Promise<Address>;
        getEnsText: (args: {
            blockNumber?: bigint | undefined;
            blockTag?: import("viem").BlockTag | undefined;
            name: string;
            key: string;
            universalResolverAddress?: any;
        }) => Promise<import("viem/ens").GetEnsTextReturnType>;
        getFeeHistory: (args: import("viem").GetFeeHistoryParameters) => Promise<import("viem").GetFeeHistoryReturnType>;
        getFilterChanges: <TFilterType extends import("viem/dist/types/types/filter").FilterType, TAbi_3 extends unknown, TEventName_2 extends string | undefined>(args: import("viem").GetFilterChangesParameters<TFilterType, TAbi_3, TEventName_2>) => Promise<import("viem").GetFilterChangesReturnType<TFilterType, TAbi_3, TEventName_2>>;
        getFilterLogs: <TAbi_4 extends unknown, TEventName_3 extends string | undefined>(args: import("viem").GetFilterLogsParameters<TAbi_4, TEventName_3>) => Promise<import("viem").GetFilterLogsReturnType<TAbi_4, TEventName_3>>;
        getGasPrice: () => Promise<bigint>;
        getLogs: <TAbiEvent_1 extends unknown>(args?: import("viem").GetLogsParameters<TAbiEvent_1> | undefined) => Promise<import("viem").GetLogsReturnType<TAbiEvent_1>>;
        getStorageAt: (args: import("viem").GetStorageAtParameters) => Promise<import("viem").GetStorageAtReturnType>;
        getTransaction: (args: import("viem").GetTransactionParameters) => Promise<any>;
        getTransactionConfirmations: (args: import("viem").GetTransactionConfirmationsParameters<any>) => Promise<bigint>;
        getTransactionCount: (args: import("viem").GetTransactionCountParameters) => Promise<number>;
        getTransactionReceipt: (args: import("viem").GetTransactionReceiptParameters) => Promise<any>;
        multicall: <TContracts extends import("viem").ContractFunctionConfig[], TAllowFailure extends boolean = true>(args: import("viem").MulticallParameters<TContracts, TAllowFailure>) => Promise<import("viem").MulticallReturnType<TContracts, TAllowFailure>>;
        readContract: <TAbi_5 extends unknown, TFunctionName_1 extends string>(args: import("viem").ReadContractParameters<TAbi_5, TFunctionName_1>) => Promise<unknown>;
        simulateContract: <TAbi_6 extends unknown = Abi, TFunctionName_2 extends string = any, TChainOverride extends unknown = undefined>(args: import("viem").SimulateContractParameters<TAbi_6, TFunctionName_2, any, TChainOverride>) => Promise<import("viem").SimulateContractReturnType<TAbi_6, TFunctionName_2, any, TChainOverride>>;
        verifyMessage: (args: import("viem/dist/types/actions/public/verifyMessage").VerifyMessageParameters) => Promise<boolean>;
        verifyTypedData: (args: import("viem/dist/types/actions/public/verifyTypedData").VerifyTypedDataParameters) => Promise<boolean>;
        uninstallFilter: (args: import("viem").UninstallFilterParameters) => Promise<boolean>;
        waitForTransactionReceipt: (args: import("viem").WaitForTransactionReceiptParameters<any>) => Promise<any>;
        watchBlockNumber: (args: import("viem").WatchBlockNumberParameters) => import("viem").WatchBlockNumberReturnType;
        watchBlocks: (args: import("viem").WatchBlocksParameters<import("viem").Transport, any>) => import("viem").WatchBlocksReturnType;
        watchContractEvent: <TAbi_7 extends unknown, TEventName_4 extends string>(args: import("viem").WatchContractEventParameters<TAbi_7, TEventName_4>) => import("viem").WatchContractEventReturnType;
        watchEvent: <TAbiEvent_2 extends unknown>(args: import("viem").WatchEventParameters<TAbiEvent_2>) => import("viem").WatchEventReturnType;
        watchPendingTransactions: (args: import("viem").WatchPendingTransactionsParameters<import("viem").Transport>) => import("viem").WatchPendingTransactionsReturnType;
    }) => void;
    waitForPendingTransactions: (account: string, chainId: number) => Promise<void>;
};
